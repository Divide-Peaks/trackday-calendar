<link rel="stylesheet" href="calendar-style.css">
<input type="file" id="file-input" accept=".csv" />
    <button id="copy-code-btn">Copy Code</button> <!-- New button added -->
<div class="calendar-wrapper" id="calender-wrapper">
    <style>
        .calendar-wrapper {
        margin: auto;
        padding: 20px;
        box-sizing: border-box; 
        width: 100%; 
        max-width: 100%; 
        }

        .month-wrapper {
        width: 100%;
        padding: 10px 30px;
        margin: 20px 0px 20px 0px;
        color: #FFFFFF;
        background-color: #1b191a;
        border-radius: 12px;
        box-sizing: border-box; 
        }

        .event-wrapper {
            background-color: rgb(212, 212, 212);
            padding: 10px 30px 10px 30px;
            margin: 20px 0px 20px 0px;
            border-radius: 12px;
        }

        .month-title {
            line-height: 0;
            font-weight: 600;
        }

        .event-content {
        display: flex;
        align-items: center; 
        justify-content: center; 
        }

        .trackday-logos {
            width: 70px;
            padding: 5px 0px 0px 0px;
        }

        .trackday-content-wrapper {
            padding: 0px 20px 0px 20px;
        }

        .Trackday-title {
            line-height: 0;
            font-size: 14px;
            font-weight: 700;
            padding: 5px 0px 5px 0px;
            color: #1b191a;
        }

        .content {
            line-height: 0;
            font-size: 14px;
            font-weight: 400;
            padding: 5px 0px 5px 0px;
            color: #1b191a;
            word-wrap: break-word; /* Ensures long words or URLs break to fit the container */
            overflow-wrap: break-word; /* Modern equivalent for better support */
            white-space: normal; /* Allows text to wrap onto the next line */
        }

        a {
            text-decoration: none;
            color: none;
        }

        .block {
            width: 25%;
            word-wrap: break-word; /* Ensures long words or URLs break to fit the container */
            overflow-wrap: break-word; /* Modern equivalent for better support */
            white-space: normal; /* Allows text to wrap onto the next line */
        }

        .fee {
            font-weight: 700;
        }

        .map-wrapper {
            width: 140px;
        }

        .filter-style {
        width: 33%;
        font-size: 14px;
        font-weight: 400;
        background-color: #fff;
        color: #191919;
        padding: 10px 20px;
        text-decoration: none;
        border-radius: 10px;
        border: 2px solid #191919;
        font-size: 14px;
        font-weight: 400;
        appearance: none; /* Removes default styling for the dropdown */
        -webkit-appearance: none; /* For Safari compatibility */
        -moz-appearance: none; /* For Firefox compatibility */
        position: relative; /* Ensures we can position pseudo-elements */
        }

        @media (max-width: 900px) {
        .event-content {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            grid-template-rows: repeat(2, auto);
            gap: 0;
        }
        }

        @media (max-width: 900px) {
        .block {
            width: 100%;
        }
        }

        @media (max-width: 900px) {
        .trackday-content-wrapper {
            padding: 0px 20px 0px 0px;
        }
        }

        @media (max-width: 900px) {
        .filter-style {
            width: 100%;
            margin-top: 10px;
        }
        }
    </style>
    <div class="filters">
        <!-- Dropdown for selecting a month -->
        <select id="month-filter" class="filter-style">
            <option value="">Select Month</option>
            <option value="January">January</option>
            <option value="February">February</option>
            <option value="March">March</option>
            <option value="April">April</option>
            <option value="May">May</option>
            <option value="June">June</option>
            <option value="July">July</option>
            <option value="August">August</option>
            <option value="September">September</option>
            <option value="October">October</option>
            <option value="November">November</option>
            <option value="December">December</option>
        </select>
    
        <!-- Dropdown for selecting a track-day provider -->
        <select id="provider-filter" class="filter-style">
            <option value="">Select Provider</option>
            <option value="Javelin Trackdays">Javelin Trackdays</option>
            <option value="Operator2">Provider 2</option>
            <option value="Operator3">Provider 3</option>
            <!-- Add more providers here as needed -->
        </select>
    
        <!-- Dropdown for selecting a track -->
        <select id="track-filter" class="filter-style">
            <option value="">Select Track</option>
            <option value="Brands Hatch">Brands Hatch</option>
            <option value="Blyton Park">Blyton Park</option>
            <option value="Snetterton">Snetterton</option>
            <option value="Donington Park">Donington Park</option>
            <option value="Bedford Autodrome">Bedford Autodrome</option>
            <option value="Oulton Park">Oulton Park</option>
            <option value="Cadwell Park">Cadwell Park</option>
            <!-- Add more tracks here as needed -->
        </select>
        <script id="search-script">
            function toggleVisibility(filterType, selectedValue, selector, childQuery) {
                const elements = document.querySelectorAll(selector);
        
                elements.forEach(el => {
                    const childElement = el.querySelector(childQuery);
        
                    if (!selectedValue || (childElement && childElement.textContent.trim() === selectedValue)) {
                        el.style.display = "block";
                    } else {
                        el.style.display = "none";
                    }
                });
            }
        
            document.getElementById("month-filter").addEventListener("change", function () {
                const selectedMonth = this.value;
        
                // Filter months and their events
                const monthWrappers = document.querySelectorAll(".month-wrapper");
                const eventsDivs = document.querySelectorAll("[id$='-events']");
                const operatorNameElement = this.querySelector("h3#Operator\\ Name");
        
                monthWrappers.forEach((wrapper, index) => {
                    const monthName = wrapper.querySelector(".month-title").textContent.trim();
        
                    if (!selectedMonth || monthName === selectedMonth) {
                        wrapper.style.display = "block";
                        eventsDivs[index].style.display = "block";
                    } else {
                        wrapper.style.display = "none";
                        eventsDivs[index].style.display = "none";
                    }
                });
            });
        
            document.getElementById("provider-filter").addEventListener("change", function () {
                toggleVisibility("provider", this.value, ".event-wrapper", "h3#Operator\\ Name");
            });
        
            document.getElementById("track-filter").addEventListener("change", function () {
                toggleVisibility("track", this.value, ".event-wrapper", "#Track");
            });
        </script>              
    </div>    
    <div class="month-wrapper">
        <h2 class="month-title">January</h2>
    </div>
    <div id="january-events">
    </div>
    <div class="month-wrapper">
        <h2 class="month-title">February</h2>
    </div>
    <div id="february-events">
    </div>
    <div class="month-wrapper">
        <h2 class="month-title">March</h2>
    </div>
    <div id="march-events">
        
    </div>
    <div class="month-wrapper">
        <h2 class="month-title">April</h2>
    </div>
    <div id="april-events">
        
    </div>
    <div class="month-wrapper">
        <h2 class="month-title">May</h2>
    </div>
    <div id="may-events">
        
    </div>
    <div class="month-wrapper">
        <h2 class="month-title">June</h2>
    </div>
    <div id="June-events">
        
    </div>
    <div class="month-wrapper">
        <h2 class="month-title">July</h2>
    </div>
    <div id="July-events">
        
    </div>
    <div class="month-wrapper">
        <h2 class="month-title">August</h2>
    </div>
    <div id="August-events">
        
    </div>
    <div class="month-wrapper">
        <h2 class="month-title">September</h2>
    </div>
    <div id="September-events">
        
    </div>
    <div class="month-wrapper">
        <h2 class="month-title">October</h2>
    </div>
    <div id="October-events">
        
    </div>
    <div class="month-wrapper">
        <h2 class="month-title">November</h2>
    </div>
    <div id="November-events">
        
    </div>
    <div class="month-wrapper">
        <h2 class="month-title">December</h2>
    </div>
    <div id="December-events">
        
    </div>
</div>


<script>
    document.getElementById("file-input").addEventListener("change", function(event) {
    const file = event.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = function(e) {
        const csvData = e.target.result;
        const parsedData = parseCSV(csvData);
        populateCalendar(parsedData);
    };
    reader.readAsText(file);
    });

    // Function to parse CSV string into an array of objects
    function parseCSV(csv) {
    const rows = csv.split("\n");
    const data = [];

    // Skip the header row (if present)
    for (let i = 1; i < rows.length; i++) {
        const columns = rows[i].split(",");
        if (columns.length >= 8) {
        const event = {
            date: columns[0].trim(),
            track: columns[1].trim(),
            layout: columns[2].trim(),
            operatorName: columns[3].trim(),
            noiseStatic: columns[4].trim(),
            noiseDriveBy: columns[5].trim(),
            carFee: columns[6].trim(),
            eventLink: columns[7].trim() // Extract the event link
        };
        data.push(event);
        }
    }
    return data;
    }

    // Function to populate the calendar with parsed events
    function populateCalendar(events) {
    events.forEach(event => {
        const eventWrapper = document.createElement('div');
        eventWrapper.classList.add('event-wrapper');

        // Event Content
        const eventContent = document.createElement('div');
        eventContent.classList.add('event-content');

        // Block for Date and Trackday Logo
        const block1 = document.createElement('div');
        block1.classList.add('block');
        const logoWrapper = document.createElement('div');
        logoWrapper.classList.add('logo-wrapper');

        const trackdayLogo = document.createElement('img');
        trackdayLogo.classList.add('trackday-logos');
        trackdayLogo.id = "trackday-logo";
        trackdayLogo.src = "https://cdn.prod.website-files.com/66eb374bf514e97d563d4ac6/675c23c2ab3af97cbf33a0a9_jtlogo_4_400-400x200.png"; // Placeholder logo
        trackdayLogo.alt = "logo";
        logoWrapper.appendChild(trackdayLogo);

        const dateElement = document.createElement('p');
        dateElement.classList.add('content');
        dateElement.id = "date";
        dateElement.textContent = event.date;
        logoWrapper.appendChild(dateElement);
        block1.appendChild(logoWrapper);
        eventContent.appendChild(block1);

        // Block for Trackday details
        const block2 = document.createElement('div');
        block2.classList.add('block');
        const trackdayContentWrapper = document.createElement('div');
        trackdayContentWrapper.classList.add('trackday-content-wrapper');

        const operatorName = document.createElement('h3');
        operatorName.classList.add('Trackday-title');
        operatorName.id = "Operator Name";
        operatorName.textContent = event.operatorName;

        const trackElement = document.createElement('p');
        trackElement.classList.add('content');
        trackElement.id = "Track";
        trackElement.textContent = event.track;

        const layoutElement = document.createElement('p');
        layoutElement.classList.add('content');
        layoutElement.id = "Layout";
        layoutElement.textContent = event.layout;

        trackdayContentWrapper.appendChild(operatorName);
        trackdayContentWrapper.appendChild(trackElement);
        trackdayContentWrapper.appendChild(layoutElement);
        block2.appendChild(trackdayContentWrapper);
        eventContent.appendChild(block2);

        // Block for Noise and Car Fee
        const block3 = document.createElement('div');
        block3.classList.add('block');
        const feeWrapper = document.createElement('div');
        feeWrapper.classList.add('trackday-content-wrapper');

        const carFeeElement = document.createElement('p');
        carFeeElement.classList.add('content');
        carFeeElement.innerHTML = `Car Fee: <span id="Car Fee" class="Fee">${event.carFee}</span>`;

        const noiseStaticElement = document.createElement('p');
        noiseStaticElement.classList.add('content');
        noiseStaticElement.textContent = `Noise Static: ${event.noiseStatic}`;

        const noiseDriveByElement = document.createElement('p');
        noiseDriveByElement.classList.add('content');
        noiseDriveByElement.textContent = `Noise Drive-by: ${event.noiseDriveBy}`;

        feeWrapper.appendChild(carFeeElement);  // Moved Car Fee above
        feeWrapper.appendChild(noiseStaticElement);
        feeWrapper.appendChild(noiseDriveByElement);
        block3.appendChild(feeWrapper);
        eventContent.appendChild(block3);

        // Block for map (Placeholder)
        const block4 = document.createElement('div');
        block4.classList.add('block');
        block4.style.textAlign = "right"; // Align the map to the right

        const mapWrapper = document.createElement('div');
        mapWrapper.classList.add('map-wrapper');

        const mapImage = document.createElement('img');
        mapImage.alt = "map";
        mapImage.style.width = "120px"; // Set map image width to 120px

        // Track to map image mapping
        const trackMapImages = {
            "Brands Hatch": "https://cdn.prod.website-files.com/66eb374bf514e97d563d4ac6/675c21497cda937320246a48_Brands_Hatch_SVG.svg",
            "Blyton Park": "https://cdn.prod.website-files.com/66eb374bf514e97d563d4ac6/675c21496879f71d6911fe05_Blyton_Park_SVG.svg",
            "Snetterton": "https://cdn.prod.website-files.com/66eb374bf514e97d563d4ac6/675c2149528d55c71c93153e_Snetterton_SVG.svg",
            "Donington Park": "https://cdn.prod.website-files.com/66eb374bf514e97d563d4ac6/675c2149ef5bd2b0b2f90c02_Donninton_SVG.svg",
            "Bedford Autodrome": "https://cdn.prod.website-files.com/66eb374bf514e97d563d4ac6/675c21495c3ceba4a5dd4ddb_Bedford_Autodrome_SVG.svg",
            "Oulton Park": "https://cdn.prod.website-files.com/66eb374bf514e97d563d4ac6/675c2149296b8d1810d0dfc9_Oulton_Park_SVG.svg",
            "Cadwell Park": "https://cdn.prod.website-files.com/66eb374bf514e97d563d4ac6/675c21490389e74b4989e6ca_Cadwell_Park_SVG.svg"
        };

        // Set the map image URL based on the event track
        const trackName = event.track;
        if (trackMapImages[trackName]) {
            mapImage.src = trackMapImages[trackName];
        }

        mapWrapper.appendChild(mapImage);
        block4.appendChild(mapWrapper);
        eventContent.appendChild(block4);

        eventWrapper.appendChild(eventContent);

        // Wrap the event wrapper with an anchor tag for the event link
        const eventLinkWrapper = document.createElement('a');
        eventLinkWrapper.href = event.eventLink; // Set the link to the event URL
        eventLinkWrapper.target = "_blank"; // Open the link in a new tab
        eventLinkWrapper.appendChild(eventWrapper);

        // Append event to the correct month
        const eventDate = new Date(event.date.split("/").reverse().join("-"));
        const monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
        const monthIndex = eventDate.getMonth();

        // Dynamically find the corresponding month by id
        const monthElement = document.getElementById(`${monthNames[monthIndex].toLowerCase()}-events`);
        if (monthElement) {
        monthElement.appendChild(eventLinkWrapper);
        }
    });
    }

    // Copy the entire HTML of the calendar-wrapper to the clipboard
    document.getElementById("copy-code-btn").addEventListener("click", function() {
    const calendarWrapper = document.getElementById("calender-wrapper");
    
    // Create a temporary textarea to hold the HTML content for copying
    const tempTextArea = document.createElement("textarea");
    document.body.appendChild(tempTextArea);

    // Set the value of the textarea to the outer HTML of the calendar-wrapper
    tempTextArea.value = calendarWrapper.outerHTML;

    // Select the content of the textarea
    tempTextArea.select();
    tempTextArea.setSelectionRange(0, 99999); // For mobile devices

    // Try copying the content to the clipboard
    try {
        document.execCommand('copy');
        alert("Calendar HTML copied to clipboard!");
    } catch (err) {
        alert("Failed to copy HTML.");
    }

    // Remove the temporary textarea from the DOM
    document.body.removeChild(tempTextArea);
    });
</script>

  
  
  
  
  
